<?php

namespace AppBundle\Repository;

use CoreBundle\Repository\CustomRepository;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends CustomRepository
{

    function listeDataTable(array $criteres, $sort, $dir, $start = 0, $max = 25, $getTotals = false, $getProduitsVentes = false) {
        $qb = $this->_em->createQueryBuilder();
        $qbFrais = $this->_em->createQueryBuilder();
        $qbFrais
            ->select('IFNULL(SUM(frais.prix + (frais.prix  * IFNULL(frais.tva,0) / 100)),0) AS totalFrais')
            ->from('AppBundle:FraisSupp','frais')
            ->join('frais.commande','c')
        ;
        $qb
            ->from($this->_entityName, "c")
        ;
        $hasPaiement = false;
        $hasFacture = false;
        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["mode"])) {
            $qbFrais->Join('c.paiements','p')
                ->Join('p.modePayment','mode')
            ;
            $qb
                ->Join('c.paiements','p')
                ->Join('p.modePayment','mode')
                ->$operateur("mode.id = :mode")
                ->setParameter("mode", $criteres["mode"])
            ;
            $hasPaiement = true;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb
                ->$operateur("c.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["dateLivraison"])) {
            $dateLivraisonDebut = date_create_from_format('d/m/Y', date($criteres["dateLivraison"]));
            $dateLivraisonFin = clone $dateLivraisonDebut;
            $dateLivraisonDebut->setTime(0, 0, 0);
            $dateLivraisonFin->setTime(23, 59, 59);

            $qb->$operateur("c.dateLivraison >= :dateLivraisonDebut")
                ->setParameter("dateLivraisonDebut", $dateLivraisonDebut)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.dateLivraison <= :dateLivraisonFin")
                ->setParameter("dateLivraisonFin", $dateLivraisonFin)
            ;
            $operateur = "andWhere";
        }
        if(isset($criteres['entreprise'])){
            $qbFrais->join('c.entreprise','e');
            $qb
                ->join('c.entreprise','e')
                ->$operateur('e.id = :id_entreprise')
                ->setParameter('id_entreprise',$criteres['entreprise'])
            ;
            $operateur = 'andWhere';
        }
        if (isset($criteres["client"])) {
            $qbFrais->join('c.client','clt');
            $qb
                ->join('c.client','clt')
                ->$operateur("clt.id = :client")
                ->setParameter("client", $criteres["client"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["cheque"])) {
            if(!$hasPaiement){
                $qbFrais->Join('c.paiements','p')
                    ->Join('p.modePayment','mode')
                ;
                $qb->Join('c.paiements','p')->Join('p.modePayment','mode');
                $hasPaiement = true;
            }
            $qb
                ->$operateur("p.numeroReglement LIKE :cheque")
                ->setParameter("cheque", "%".$criteres["cheque"]."%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["facture"]) or isset($criteres["has_invoice"])) {
            $qbFrais->Join('c.factureGlobal','f');
            $qb->Join('c.factureGlobal','f');
            if(isset($criteres["facture"])){
                $qb
                    ->$operateur("f.id = :facture")
                    ->setParameter("facture",$criteres["facture"])
                ;
                $operateur = "andWhere";
            }
        }
       if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["ttc"])) {
            $qb->$operateur("c.montantTtc = :ttc")
                ->setParameter("ttc", $criteres["ttc"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["ht"])) {
            $qb->$operateur("c.montantHt = :ht")
                ->setParameter("ht", $criteres["ht"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["mois"]) and !empty($criteres['mois'])){
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres["mois"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["annee"]) and !empty($criteres['annee'])){
           $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres["annee"])
            ;
            $operateur = "andWhere";
        }

        if(isset($criteres['date_debut']) and isset($criteres['date_fin']) and !empty($criteres['date_debut']) and !empty($criteres['date_fin'])){
            $date_start = date_create_from_format('d/m/Y', $criteres["date_debut"]);
            $date_end = date_create_from_format('d/m/Y', $criteres["date_fin"]);
            $date_start->setTime(0, 0, 0);
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if($getTotals){
            if(!$hasPaiement)
                $qb->Join('c.paiements','p')->Join('p.modePayment','mode');
            $qb->select("mode.label,SUM(p.prix) AS total")
                ->groupBy('mode')
                ->getQuery()->getResult()
            ;
            return $qb->getQuery()->getResult();
        }

        if($getProduitsVentes){
            $qb->join('c.produits','cpr')
                ->join('cpr.produit','pr')
                ->select("pr.titre,pr.unite,SUM(cpr.quantite) AS qte")
                ->groupBy('pr')
                ->getQuery()->getResult()
            ;
            return $qb->getQuery()->getResult();
        }

        $totalFiltred =  $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $totals = $this->listeDataTable($criteres,$sort,$dir,$start,$max,true);
        $produits = $this->listeDataTable($criteres,$sort,$dir,$start,$max,false,true);
        $qb2 = clone $qb;
        $commandes = $qb
            ->select("DISTINCT c")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;

        $totalGlobal = $qb2->select('SUM(c.montantTtc) AS totalTtc')
            ->getQuery()->getSingleScalarResult();

        if($qb->getDQLPart('where'))
            $qbFrais->where(join(' AND ',$qb->getDQLPart('where')->getParts()))->setParameters($qb->getParameters());

        $totalGlobal += (float) $qbFrais->getQuery()->getSingleScalarResult();
        if(!$hasPaiement)
            $qb2->join('c.paiements','p');
        $totalAvance = $qb2->select('SUM(p.prix)')->getQuery()->getSingleScalarResult();
        return array("total" => $total,"totalAvance" => $totalAvance, "totalFiltred" => $totalFiltred, "commandes" => $commandes,"totals" => $totals,"totalGlobal" => $totalGlobal,'produits'=>$produits);
    }

    function count(array $criteres){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('COUNT(c)')
            ->from($this->getEntityName(),'c')
        ;
        $operateur = 'where';
        if(isset($criteres['employe'])){
            $qb
                ->join('c.employe','e')
                ->$operateur('e.id = :id_employe')
                ->setParameter('id_employe',$criteres['employe'])
            ;
            $operateur = 'andWhere';
        }
        if(isset($criteres['entreprise'])){
            $qb
                ->join('c.entreprise','e')
                ->$operateur('e.id = :id_entreprise')
                ->setParameter('id_entreprise',$criteres['entreprise'])
            ;
            $operateur = 'andWhere';
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    function findCustom(array $criteres,$limit = 5,$dir = 'DESC'){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('c')
            ->from($this->getEntityName(),'c')
        ;
        $operateur = 'where';

        if(isset($criteres['except'])){
            $qb
                ->$operateur('c.id <> :except')
                ->setParameter('except',$criteres['except'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['client'])){
            $qb
                ->join('c.client','clt')
                ->$operateur('clt.id = :client')
                ->setParameter('client',$criteres['client'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['entreprise'])){
            $qb
                ->join('c.entreprise','e')
                ->$operateur('e.id = :id_entreprise')
                ->setParameter('id_entreprise',$criteres['entreprise'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['ids'])){
            $qb
                ->$operateur('c.id IN (:ids)')
                ->setParameter('ids',$criteres['ids'])
            ;
            $operateur = 'andWhere';
        }

        $qb->setMaxResults($limit)
            ->orderBy('c.date',$dir)
        ;

        return $qb->getQuery()->getResult();
    }


    function total(array $criteres){
        $qb = $this->_em->createQueryBuilder();
        $operateur = 'where';

        if(isset($criteres['mode'])){
            $qb
                ->join('c.paiements','p')
                ->join('p.modePayment','m')
                ->$operateur('m.id = :mode')
                ->setParameter('mode',$criteres['mode'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['annee']) and !empty($criteres['annee'])){
            $qb
                ->$operateur('year(c.date) = :annee')
                ->setParameter('annee',$criteres['annee'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['mois']) and !empty($criteres['mois'])){
            $qb
                ->$operateur('month(c.date) = :mois')
                ->setParameter('mois',$criteres['mois'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['jour']) and !empty($criteres['jour'])){
            $qb
                ->$operateur('day(c.date) = :jour')
                ->setParameter('jour',$criteres['jour'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['date'])){
            $date = date_create_from_format('d/m/Y', $criteres["date"]);
            $date_start = clone $date;
            $date_start->setTime(0, 0, 0);
            $date_end = clone $date;
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['date_debut']) and isset($criteres['date_fin']) and !empty($criteres['date_debut']) and !empty($criteres['date_fin'])){
            $date_start = date_create_from_format('d/m/Y', $criteres["date_debut"]);
            $date_end = date_create_from_format('d/m/Y', $criteres["date_fin"]);
            $date_start->setTime(0, 0, 0);
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["has_invoice"])) {
            $qb->join("c.factureGlobal","f");
            $operateur = "andWhere";
        }

        $qbTtc = clone $qb;
        $qbTtc
            ->select('IFNULL(SUM(c.montantTtc),0) AS totalTtc')
            ->from($this->getEntityName(),'c')
        ;
        $totalTtc = $qbTtc->getQuery()->getSingleScalarResult();

        $qbFrais = clone $qb;
        $qbFrais
            ->select('IFNULL(SUM(frais.prix + (frais.prix  * IFNULL(frais.tva,0) / 100)),0) AS totalFrais')
            ->from('AppBundle:FraisSupp','frais')
            ->join('frais.commande','c')
        ;
        $totalFrais = $qbFrais->getQuery()->getSingleScalarResult();

        return (float)$totalTtc + (float)$totalFrais;
    }

    function getTotalByMonthsInLastNbrMonth($nbrMonth){
        $qb = $this->_em->createQueryBuilder();
        $subQuery = 'SELECT IFNULL(SUM(frais.prix + (frais.prix  * IFNULL(frais.tva,0) / 100)),0) AS totalFrais FROM AppBundle:FraisSupp frais JOIN frais.commande cmd WHERE cmd.date <= NOW() AND cmd.date >= datesub(NOW(),12,\'MONTH\') AND month(cmd.date) = :mois AND year(cmd.date) = :annee';

        $qb
            ->select('DATE_FORMAT(c.date, \'%m\') AS mois,DATE_FORMAT(c.date, \'%Y\') AS annee, SUM(c.montantTtc) AS total')
            ->from($this->getEntityName(),'c')
            ->where('c.date <= NOW()')
            ->andWhere('c.date >= datesub(NOW(),12,\'MONTH\')')
            ->groupBy('mois')
            ->addGroupBy('annee')
            ->orderBy('annee','ASC')
            ->addOrderBy('mois','ASC')
        ;

        $result = $qb->getQuery()->getResult();

        foreach ($result as $index => $line){
            $frais = $this->_em->createQuery($subQuery)->setParameter('mois',$line['mois'])->setParameter('annee',$line['annee'])->getSingleScalarResult();
            $result[$index]['total'] = $result[$index]['total'] + $frais;
        }
        $resultFinal = array();
        for ($i = ($nbrMonth-1); $i >= 0; $i--) {
            $mois = date("m", strtotime( date( 'Y-m-01' )." -$i months"));
            $annee = date("Y", strtotime( date( 'Y-m-01' )." -$i months"));
            $resultFinal[$i] = array('mois'=>$mois,'annee'=>$annee,'total'=>0.00);
            foreach ($result as $line){
                if($line['mois'] === $mois and $line['annee'] === $annee)
                    $resultFinal[$i] = $line;
            }
        }

        return $resultFinal;
    }

    function report(array $criteres){
        $qb = $this->_em->createQueryBuilder();

        $operateur = 'where';

        if (isset($criteres["mois"]) and !empty($criteres["mois"])){
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres["mois"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["annee"]) and !empty($criteres["annee"])){
            $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres["annee"])
            ;
            $operateur = "andWhere";
        }

        if(isset($criteres['date_start']) and isset($criteres['date_end'])){
            $date_start = date_create_from_format('d/m/Y', $criteres["date_start"]);
            $date_start->setTime(0, 0, 0);
            $date_end = date_create_from_format('d/m/Y', $criteres["date_end"]);
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['has_invoice'])){
            if($criteres['has_invoice'] === true){
                $qb->$operateur('c.factureGlobal is not null');
                $operateur = 'andWhere';
            }
            if($criteres['has_invoice'] === false){
                $qb->$operateur('c.factureGlobal is null');
                $operateur = 'andWhere';
            }
        }

        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }

        if(isset($criteres['entreprise'])){
            $qb
                ->$operateur('c.entreprise = :id_entreprise')
                ->setParameter('id_entreprise',$criteres['entreprise'])
            ;
            $operateur = 'andWhere';
        }
        if (isset($criteres["client"])) {
            $qb
                ->$operateur("c.client = :client")
                ->setParameter("client", $criteres["client"])
            ;
            $operateur = "andWhere";
        }
        $qbCommandes = clone $qb;
        $commandes = $qbCommandes->select('c')->from($this->getEntityName(),'c')->orderBy('c.date','DESC')->getQuery()->getResult();

        $qbTotalTtc = clone $qb;
        $TotalTtc = $qbTotalTtc->select('SUM(c.montantTtc) AS total')->from($this->getEntityName(),'c')->getQuery()->getSingleScalarResult();

        $qbTotalFrais = clone $qb;
        $TotalFrais = $qbTotalFrais
            ->select('IFNULL(SUM(frais.prix + (frais.prix  * IFNULL(frais.tva,0) / 100)),0) AS totalFrais')
            ->from('AppBundle:FraisSupp','frais')->join('frais.commande','c')
            ->getQuery()->getSingleScalarResult()
        ;

        $qbTotalPaiements = clone $qb;
        $TotalPaiements = $qbTotalPaiements
            ->select('IFNULL(SUM(p.prix),0) AS totalPaiements')
            ->from('AppBundle:Paiement','p')->join('p.commande','c')
            ->getQuery()->getSingleScalarResult()
        ;

        $total = (float)$TotalTtc + (float)$TotalFrais;
        $reste = (float)$total - (float)$TotalPaiements;
        return array(
            "commandes" => $commandes,
            "total" => (float)$total,
            "avance" => (float)$TotalPaiements,
            "reste" => (float)$reste,
        );

    }

    function findByIds(array $ids, $order = null, $dir = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('c')
            ->from($this->getEntityName(), 'c')
            ->where('c.id IN (:ids)')
            ->setParameter('ids', $ids);
        if ($order and $dir)
            $qb->orderBy($order, $dir);

        return $qb->getQuery()->getResult();
    }


}
