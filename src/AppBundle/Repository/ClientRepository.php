<?php

namespace AppBundle\Repository;

use CoreBundle\Repository\CustomRepository;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends CustomRepository
{

    public function listeDataTableClient(array $criteres, $sort, $dir, $start = 0, $max = 25)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "c")
            ->where('(c.isCommercial = 0 OR c.isCommercial is NULL)')
        ;
        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        
        if (isset($criteres["archive"])) {
            $qb->andWhere("c.archive = :archive")
                ->setParameter("archive", $criteres["archive"])
            ;
        }
        if (isset($criteres["id"])) {
            $qb->andWhere("c.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
        }
        if (isset($criteres["nom"])) {
            $qb->andWhere("c.nom LIKE :nom")
                ->setParameter("nom", "%".$criteres["nom"]."%")
            ;
        }
        if (isset($criteres["prenom"])) {
            $qb->andWhere("c.nom LIKE :prenom")
                ->setParameter("prenom", "%".$criteres["prenom"]."%")
            ;
        }
        if (isset($criteres["surnom"])) {
            $qb->andWhere("c.surNom LIKE :surnom")
                ->setParameter("surnom", "%".$criteres["surnom"]."%")
            ;
        }
        if (isset($criteres["cin"])) {
            $qb->andWhere("c.cin LIKE :cin")
                ->setParameter("cin", "%".$criteres["cin"]."%")
            ;
        }
        if (isset($criteres["email"])) {
            $qb->andWhere("c.email LIKE :email")
                ->setParameter("email", "%".$criteres["email"]."%")
            ;
        }

        if (isset($criteres["gsm"])) {
            $qb->andWhere("c.gsm LIKE :gsm")
                ->setParameter("gsm", "%".$criteres["gsm"]."%")
            ;
        }

        $totalFiltred =  $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $clients = $qb
            ->select('DISTINCT c')
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "clients" => $clients);
    }
    public function listeDataTableCommerciale(array $criteres, $sort, $dir, $start = 0, $max = 25)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "c")
            ->where('c.isCommercial = 1')
        ;
        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        if (isset($criteres["archive"])) {
            $qb->andWhere("c.archive = :archive")
                ->setParameter("archive", $criteres["archive"])
            ;
        }
        if (isset($criteres["id"])) {
            $qb->andWhere("c.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
        }
        if (isset($criteres["nom"])) {
            $qb->andWhere("c.nom LIKE :nom")
                ->setParameter("nom", "%".$criteres["nom"]."%")
            ;
        }
        if (isset($criteres["surnom"])) {
            $qb->andWhere("c.surNom LIKE :surnom")
                ->setParameter("surnom", "%".$criteres["surnom"]."%")
            ;
        }
        if (isset($criteres["prenom"])) {
            $qb->andWhere("c.nom LIKE :prenom")
                ->setParameter("prenom", "%".$criteres["prenom"]."%")
            ;
        }
        if (isset($criteres["cin"])) {
            $qb->andWhere("c.cin LIKE :cin")
                ->setParameter("cin", "%".$criteres["cin"]."%")
            ;
        }
        if (isset($criteres["email"])) {
            $qb->andWhere("c.email LIKE :email")
                ->setParameter("email", "%".$criteres["email"]."%")
            ;
        }

        if (isset($criteres["gsm"])) {
            $qb->andWhere("c.gsm LIKE :gsm")
                ->setParameter("gsm", "%".$criteres["gsm"]."%")
            ;
        }

        $totalFiltred =  $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $clients = $qb
            ->select('DISTINCT c')
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "clients" => $clients);
    }
}
