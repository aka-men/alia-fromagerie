<?php

namespace AppBundle\Repository;

use CoreBundle\Repository\CustomRepository;

/**
 * ChargeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChargeRepository extends CustomRepository
{

    function listeDataTable(array $criteres, $sort, $dir, $start = 0, $max = 25,$getTotals = false) {
         $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, "c")
        ->where('c.employe is NULL')
        ;
        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["mode"])) {
            $qb
                ->join('c.modePayment','m')
                ->$operateur("m.id = :mode")
                ->setParameter("mode", $criteres["mode"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["fournisseur"])) {
            $qb
                ->join('c.fournisseur','f')
                ->$operateur("f.id = :fournisseur")
                ->setParameter("fournisseur", $criteres["fournisseur"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["type"])) {
            $qb
                ->join('c.typesDepenses','t')
                ->$operateur("t.id = :type")
                ->setParameter("type", $criteres["type"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["cheque"])) {
            $qb->$operateur("c.numeroCheque LIKE :cheque")
                ->setParameter("cheque", "%".$criteres["cheque"]."%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["facture"])) {
            $qb->$operateur("c.numeroFacture LIKE :facture")
                ->setParameter("facture", "%".$criteres["facture"]."%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb->$operateur("c.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["montant"])) {
            $qb->$operateur("c.montantTtc = :montant")
                ->setParameter("montant", $criteres["montant"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["mois"])) {
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres['mois'])
            ;
            $operateur = "andWhere";
         }

        if (isset($criteres["annee"])) {
            $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres['annee'])
            ;
            $operateur = "andWhere";
        }

        if($getTotals){
            $qb->select("mode.label,SUM(c.montantTtc) AS total")
                ->join('c.modePayment','mode')
                ->groupBy('mode')
            ;
            return $qb->getQuery()->getResult();
        }
        $qbCopie = clone $qb;
        $totalGlobal = $qbCopie->select('SUM(c.montantTtc) AS totalTtc')
            ->getQuery()->getSingleScalarResult();
        $totalFiltred =  $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $totals = $this->listeDataTable($criteres,$sort,$dir,$start,$max,true);
        $charges = $qb
            ->select("DISTINCT c")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
       return array("total" => $total, "totalFiltred" => $totalFiltred, "charges" => $charges,"totals" => $totals,"totalGlobal" => $totalGlobal);
    }

    function listeDataTableEmployes(array $criteres, $sort, $dir, $start = 0, $max = 25,$getTotals = false) {
        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, "c")->join('c.employe','e');
        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $operateur = "where";
        if (isset($criteres["employe"])) {
            $qb
                ->$operateur("e.id = :employer")
                ->setParameter("employer", $criteres["employe"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["mode"])) {
            $qb
                ->join('c.modePayment','m')
                ->$operateur("m.id = :mode")
                ->setParameter("mode", $criteres["mode"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["type"])) {
            $qb
                ->join('c.typesDepenses','t')
                ->$operateur("t.id = :type")
                ->setParameter("type", $criteres["type"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["cheque"])) {
            $qb->$operateur("c.numeroCheque LIKE :cheque")
                ->setParameter("cheque", "%".$criteres["cheque"]."%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["montant"])) {
            $qb->$operateur("c.montantTtc = :montant")
                ->setParameter("montant", $criteres["montant"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb->$operateur("c.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["mois"])) {
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres['mois'])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["annee"])) {
            $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres['annee'])
            ;
            $operateur = "andWhere";
        }

        if($getTotals){
            $qb->select("mode.label,SUM(c.montantTtc) AS total")
                ->join('c.modePayment','mode')
                ->groupBy('mode')
            ;
            return $qb->getQuery()->getResult();
        }
        $qbCopie = clone $qb;
        $totalGlobal = $qbCopie->select('SUM(c.montantTtc) AS totalTtc')
            ->$operateur('c.modePayment is not null')
            ->getQuery()->getSingleScalarResult();
        $totalFiltred =  $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();
        $totals = $this->listeDataTableEmployes($criteres,$sort,$dir,$start,$max,true);
        $charges = $qb
            ->select("DISTINCT c")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "charges" => $charges,"totals" => $totals,"totalGlobal" => $totalGlobal);
    }


    function count(array $criteres){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('COUNT(c)')
            ->from($this->getEntityName(),'c')
        ;
        $operateur = 'where';
        if(isset($criteres['type'])){
            $qb
                ->join('c.typesDepenses','t')
                ->$operateur('t.id = :id_type')
                ->setParameter('id_type',$criteres['type'])
            ;
            $operateur = 'andWhere';
        }
        if(isset($criteres['fournisseur'])){
            $qb
                ->join('c.fournisseur','f')
                ->$operateur('f.id = :id_fournisseur')
                ->setParameter('id_fournisseur',$criteres['fournisseur'])
            ;
            $operateur = 'andWhere';
        }
        if(isset($criteres['mode'])){
            $qb
                ->join('c.modePayment','m')
                ->$operateur('m.id = :id_modePayment')
                ->setParameter('id_modePayment',$criteres['mode'])
            ;
            $operateur = 'andWhere';
        }
        if(isset($criteres['employe'])){
            $qb
                ->join('c.employe','e')
                ->$operateur('e.id = :id_employe')
                ->setParameter('id_employe',$criteres['employe'])
            ;
            $operateur = 'andWhere';
        }
        return $qb->getQuery()->getSingleScalarResult();
    }

    function getReglements(array $modes,$nbrJours){
        $dateDebut = new \DateTime();
        $dateFin = new \DateTime();
        $dateFin->modify('+'.$nbrJours.' day');
        $dateDebut->setTime(00,00,00);
        $dateFin->setTime(23,59,59);

        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('c.id AS charge,f.nom AS fournisseur,c.date AS date,c.montantTtc AS montant,i.nom AS image,c.numeroCheque AS numeroReglement,m.label AS mode,c.dateCheque AS dateReglement,u.username AS username,CONCAT(e.nom,CONCAT(\' \',e.prenom)) AS employe')
            ->from($this->getEntityName(),'c')
            ->leftJoin('c.fournisseur','f')
            ->leftJoin('c.employe','e')
            ->leftJoin('c.imageCheque','i')
            ->leftJoin('c.user','u')
            ->join('c.modePayment','m')
            ->where('m.label IN (:modes)')
            ->setParameter('modes',$modes)
            ->andWhere('c.dateCheque is not null')
            ->andWhere('c.dateCheque >= :dateDebut')
            ->andWhere('c.dateCheque <= :dateFin')
            ->setParameter('dateFin',$dateFin)
            ->setParameter('dateDebut',$dateDebut)
            ->orderBy('c.dateCheque','ASC')
        ;

        return $qb->getQuery()->getResult();
    }

    function total(array $criteres,$type = null){
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('IFNULL(SUM(c.montantTtc),0) AS total')
            ->from($this->getEntityName(),'c')
        ;
        $operateur = 'where';

        if($type and $type === 'employe'){
            $qb->$operateur('c.employe is not null');
            $operateur = 'andWhere';
        }

        if($type and $type === 'autre'){
            $qb->$operateur('c.employe is null');
            $operateur = 'andWhere';
        }

        if(isset($criteres['mode'])){
            $qb
                ->join('c.modePayment','m')
                ->$operateur('m.id = :mode')
                ->setParameter('mode',$criteres['mode'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['annee'])){
            $qb
                ->$operateur('year(c.date) = :annee')
                ->setParameter('annee',$criteres['annee'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['mois'])){
            $qb
                ->$operateur('month(c.date) = :mois')
                ->setParameter('mois',$criteres['mois'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['jour'])){
            $qb
                ->$operateur('day(c.date) = :jour')
                ->setParameter('jour',$criteres['jour'])
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['date'])){
            $date = date_create_from_format('d/m/Y', $criteres["date"]);
            $date_start = clone $date;
            $date_start->setTime(0, 0, 0);
            $date_end = clone $date;
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if (isset($criteres["fournisseur"])) {
            $qb
                ->join('c.fournisseur','f')
                ->$operateur("f.id = :fournisseur")
                ->setParameter("fournisseur", $criteres["fournisseur"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["employe"])) {
            $qb
                ->join('c.employe','f')
                ->$operateur("f.id = :employe")
                ->setParameter("employe", $criteres["employe"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["hasFacture"])) {
            $qb->$operateur("c.numeroFacture is not null");
            $operateur = "andWhere";
        }

        if (isset($criteres["isVaucher"])) {
            $qb->$operateur("c.isVaucher = :isVaucher")
                ->setParameter("isVaucher", $criteres["isVaucher"])
            ;
            $operateur = "andWhere";
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    function getTotalByMonthsInLastNbrMonth($nbrMonth,$type = null){
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('DATE_FORMAT(c.date, \'%m\') AS mois,DATE_FORMAT(c.date, \'%Y\') AS annee, SUM(c.montantTtc) AS total')
            ->from($this->getEntityName(),'c')
            ->where('c.date <= NOW()')
            ->andWhere('c.date >= datesub(NOW(),12,\'MONTH\')')
            ->groupBy('mois')
            ->addGroupBy('annee')
            ->orderBy('annee','ASC')
            ->addOrderBy('mois','ASC')
        ;
        if($type and $type === 'employe'){
            $qb->andWhere('c.employe is not null')->join('c.employe','e');
        }
        if($type and $type === 'autre'){
            $qb->andWhere('c.employe is null');
        }
        $result = $qb->getQuery()->getResult();
        $resultFinal = array();
        for ($i = ($nbrMonth-1); $i >= 0; $i--) {
            $mois = date("m", strtotime( date( 'Y-m-01' )." -$i months"));
            $annee = date("Y", strtotime( date( 'Y-m-01' )." -$i months"));
            $resultFinal[$i] = array('mois'=>$mois,'annee'=>$annee,'total'=>0.00);
            foreach ($result as $line){
                if($line['mois'] === $mois and $line['annee'] === $annee)
                    $resultFinal[$i] = $line;
            }
        }

        return $resultFinal;
    }


    function report(array $criteres){
        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->getEntityName(),'c');
        $operateur = 'where';

        if(isset($criteres['type'])){
            if($criteres['type'] === 'autre'){
                $qb ->$operateur('c.employe is null');
                $operateur = "andWhere";
            }
            if($criteres['type'] === 'employe'){
                $qb ->$operateur('c.employe is not null');
                $operateur = "andWhere";
            }
        }

        if (isset($criteres["mois"])) {
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres["mois"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["annee"])){
            $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres["annee"])
            ;
            $operateur = "andWhere";
        }

        if(isset($criteres['date_start']) and isset($criteres['date_end'])){
            $date_start = date_create_from_format('d/m/Y', $criteres["date_start"]);
            $date_start->setTime(0, 0, 0);
            $date_end = date_create_from_format('d/m/Y', $criteres["date_end"]);
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.date >= :dateStart")
                ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.date <= :dateEnd")
                ->setParameter("dateEnd", $date_end)
            ;
            $operateur = 'andWhere';
        }

        if(isset($criteres['has_invoice'])){
            if($criteres['has_invoice'] === true){
                $qb->$operateur('c.numeroFacture is not null');
                $operateur = 'andWhere';
            }
            if($criteres['has_invoice'] === false){
                $qb->$operateur('c.numeroFacture is null');
                $operateur = 'andWhere';
            }
        }

        if(isset($criteres['is_vaucher'])){
            if($criteres['is_vaucher'] === true){
                $qb->$operateur('c.isVaucher = 1');
                $operateur = 'andWhere';
            }
            if($criteres['is_vaucher'] === false){
                $qb->$operateur('(c.isVaucher is null or a.isVaucher = 0)');
                $operateur = 'andWhere';
            }
        }

        $qbCharges = clone $qb;
        $charges = $qbCharges->select('c')->orderBy('c.date','DESC')->getQuery()->getResult();

        $qbTotalTtc = clone $qb;
        $totalTtc = $qbTotalTtc->select('SUM(c.montantTtc) AS total')->getQuery()->getSingleScalarResult();


        return array(
            "charges" => $charges,
            "total" => (float)$totalTtc
        );
    }
}
