<?php

namespace AppBundle\Repository;

use CoreBundle\Repository\CustomRepository;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends CustomRepository
{
    function listeMPDataTable(array $criteres, $sort, $dir, $start = 0, $max = 10) {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "p")
            ->where('p.isMatierePremiere = 1')
            ->andWhere("(SELECT COUNT(pr.id) AS cnt FROM ".$this->_entityName." pr JOIN pr.childrens c WHERE c.id = p.id) = 0")
         ;

        $total = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["titre"])) {
            $qb->$operateur("p.titre LIKE :titre")
                ->setParameter("titre", "%" . $criteres["titre"] . "%")
            ;
            $operateur = "andWhere";
        }
       if (isset($criteres["prixAchat"])) {
            $qb->$operateur("p.prixAchat = :prixAchat")
                ->setParameter("prixAchat", $criteres["prixAchat"])
            ;
            $operateur = "andWhere";
        }
       if (isset($criteres["archive"])) {
            $qb->$operateur("p.archive = :archive")
                ->setParameter("archive", $criteres["archive"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb->$operateur("p.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
       if (isset($criteres["fournisseurs"])) {
            $qb
                ->join('p.fournisseurs','f')
                ->$operateur("f.id IN (:fournisseurs)")
                ->setParameter("fournisseurs", $criteres["fournisseurs"])
            ;
            $operateur = "andWhere";
        }
        $totalFiltred = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $produits = $qb
            ->select("DISTINCT p")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "produits" => $produits);
    }

    function listePFDataTable(array $criteres, $sort, $dir, $start = 0, $max = 10) {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "p")
            ->where('p.isAchat = 1')
            ->andWhere('p.isMatierePremiere = 0')
            ->andWhere("(SELECT COUNT(pr.id) AS cnt FROM ".$this->_entityName." pr JOIN pr.childrens c WHERE c.id = p.id) = 0")
        ;

        $total = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["titre"])) {
            $qb->$operateur("p.titre LIKE :titre")
                ->setParameter("titre", "%" . $criteres["titre"] . "%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["prix"])) {
            $qb->$operateur("p.prix = :prix")
                ->setParameter("prix", $criteres["prix"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["prixAchat"])) {
            $qb->$operateur("p.prixAchat = :prixAchat")
                ->setParameter("prixAchat", $criteres["prixAchat"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["stock"])) {
            $qb->$operateur("p.stock = :stock")
                ->setParameter("stock", $criteres["stock"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["archive"])) {
            $qb->$operateur("p.archive = :archive")
                ->setParameter("archive", $criteres["archive"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb->$operateur("p.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["fournisseurs"])) {
            $qb
                ->join('p.fournisseurs','f')
                ->$operateur("f.id IN (:fournisseurs)")
                ->setParameter("fournisseurs", $criteres["fournisseurs"])
            ;
            $operateur = "andWhere";
        }
        $totalFiltred = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $produits = $qb
            ->select("DISTINCT p")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "produits" => $produits);
    }

    function listeChilds($parent_id,array $criteres, $sort, $dir, $start = 0, $max = 10) {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "p")
            ->join('p.parents','pr')
            ->where('pr.id = :parent_id')
            ->setParameter('parent_id',$parent_id)
        ;

        $total = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["titre"])) {
            $qb->$operateur("p.titre LIKE :titre")
                ->setParameter("titre", "%" . $criteres["titre"] . "%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["prix"])) {
            $qb->$operateur("p.prix = :prix")
                ->setParameter("prix", $criteres["prix"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["stock"])) {
            $qb->$operateur("p.stock = :stock")
                ->setParameter("stock", $criteres["stock"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["archive"])) {
            $qb->$operateur("p.archive = :archive")
                ->setParameter("archive", $criteres["archive"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb->$operateur("p.id = :id")
                ->setParameter("id", $criteres["id"])
            ;
            $operateur = "andWhere";
        }
        $totalFiltred = $qb->select("COUNT(p)")->getQuery()->getSingleScalarResult();
        $produits = $qb
            ->select("DISTINCT p")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "produits" => $produits);
    }

    function getProduitForAchat($archive = null){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('DISTINCT p')
            ->from($this->getEntityName(),'p')
            ->where('p.isMatierePremiere = 1 OR p.isAchat = 1')
            ->andWhere("(SELECT COUNT(pr.id) AS cnt FROM ".$this->_entityName." pr JOIN pr.childrens c WHERE c.id = p.id) = 0")
        ;
        if($archive){
            $qb
                ->andWhere('p.archive = :archive')
                ->setParameter('archive',$archive)
            ;
        }
        return $qb->getQuery()->getResult();
    }

    function autocompleteAchat(array $criteres){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('p.id,p.titre,p.prixAchat,p.isMatierePremiere')
            ->from($this->getEntityName(),'p')
            ->where('p.isMatierePremiere = 1 OR p.isAchat = 1')
            ->andWhere("(SELECT COUNT(pr.id) AS cnt FROM ".$this->_entityName." pr JOIN pr.childrens c WHERE c.id = p.id) = 0")
            ->setMaxResults(10)
        ;
        if(isset($criteres['term'])){
            $qb
                ->andWhere('p.titre LIKE :term')
                ->setParameter('term',"%".$criteres['term']."%")
            ;
        }
        if(isset($criteres['fournisseur'])){
            $qb
                ->join('p.fournisseurs','f')
                ->andWhere('f.id = :id_fournisseur')
                ->setParameter('id_fournisseur',$criteres['fournisseur'])
            ;
        }
        if(isset($criteres['except'])){
            $qb
                ->andWhere('p.id NOT IN (:except)')
                ->setParameter('except',$criteres['except'])
            ;
        }
        return $qb->getQuery()->getResult();
    }

    function AliaForSel(){
        return $this->_em->createQuery('
               SELECT DISTINCT p 
               FROM AppBundle:Produit p
               WHERE (p.archive = 0 OR p.archive is NULL) AND (p.isMatierePremiere = 0 OR p.isMatierePremiere is NULL) AND (p.isAchat = 0 OR p.isAchat is NULL)
               ORDER BY p.titre ASC
               ')
            ->getResult();
        }

    function ImportationForSel(){
        return $this->_em->createQuery('
               SELECT DISTINCT p 
               FROM AppBundle:Produit p
               WHERE (p.archive = 0 OR p.archive is NULL) AND (p.isMatierePremiere = 0 OR p.isMatierePremiere is NULL) AND p.isAchat = 1
               ORDER BY p.titre ASC
               ')
            ->getResult();
    }

    function quantiteVendus($mois,$annee){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('p.titre AS produit,p.unite,(SELECT IFNULL(SUM(pc.quantite),0) FROM AppBundle:ProduitCommande pc JOIN pc.produit pr JOIN pc.commande c WHERE month(c.date) = :mois AND year(c.date) = :annee AND pr.id = p.id) AS ventes')
            ->from($this->getEntityName(),'p')
            ->where('p.isMatierePremiere = 0 OR p.isMatierePremiere is null')
            ->setParameter('mois',$mois)
            ->setParameter('annee',$annee)
        ;
        return $qb->getQuery()->getResult();
    }

    function quantiteAchetes($mois,$annee){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('p.titre AS produit,p.unite,(SELECT IFNULL(SUM(pa.quantite),0) FROM AppBundle:ProduitAchat pa JOIN pa.produit pr JOIN pa.achat a WHERE month(a.date) = :mois AND year(a.date) = :annee AND pr.id = p.id) AS achats')
            ->from($this->getEntityName(),'p')
            ->where('p.isMatierePremiere = 0 OR p.isMatierePremiere is null')
            ->setParameter('mois',$mois)
            ->setParameter('annee',$annee)
        ;
        return $qb->getQuery()->getResult();
    }

    function quantiteProduite($mois,$annee){
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('p.titre AS produit,p.unite,(SELECT IFNULL(SUM(ap.valeur),0) FROM AppBundle:AchatMatierePremiereProduit ap JOIN ap.produit pr JOIN ap.achat a WHERE month(a.date) = :mois AND year(a.date) = :annee AND pr.id = p.id) AS production')
            ->from($this->getEntityName(),'p')
            ->where('p.isMatierePremiere = 0 OR p.isMatierePremiere is null')
            ->setParameter('mois',$mois)
            ->setParameter('annee',$annee)
        ;
        return $qb->getQuery()->getResult();
    }
}
