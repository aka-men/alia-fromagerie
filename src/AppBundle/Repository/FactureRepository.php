<?php

namespace AppBundle\Repository;

use CoreBundle\Repository\CustomRepository;

/**
 * FactureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactureRepository extends CustomRepository
{
    function listeDataTable(array $criteres, $sort, $dir, $start = 0, $max = 25, $getTotals = false, $getProduitsVentes= false)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->from($this->_entityName, "f")
            ->join('f.commandes', 'c');
        $hasPaiement = false;
        $total = $qb->select("COUNT(f)")->getQuery()->getSingleScalarResult();
        $operateur = "andWhere";
        if (isset($criteres["mode"])) {
            $qb
                ->Join('c.paiements', 'p')
                ->Join('p.modePayment', 'mode')
                ->$operateur("mode.id = :mode")
                ->setParameter("mode", $criteres["mode"]);
            $hasPaiement = true;
            $operateur = "andWhere";
        }
        if (isset($criteres["id"])) {
            $qb
                ->$operateur("f.id = :id")
                ->setParameter("id", $criteres["id"]);
            $operateur = "andWhere";
        }
        if (isset($criteres["commande"])) {
            $qb
                ->$operateur("c.id = :commande")
                ->setParameter("commande", $criteres["commande"]);
            $operateur = "andWhere";
        }
        if (isset($criteres['entreprise'])) {
            $qb
                ->join('c.entreprise', 'e')
                ->$operateur('e.id = :id_entreprise')
                ->setParameter('id_entreprise', $criteres['entreprise']);
            $operateur = 'andWhere';
        }
        if (isset($criteres["client"])) {
            $qb
                ->join('c.client', 'clt')
                ->$operateur("clt.id = :client")
                ->setParameter("client", $criteres["client"]);
            $operateur = "andWhere";
        }
        if (isset($criteres["cheque"])) {
            if (!$hasPaiement) {
                $qb->Join('c.paiements', 'p')->Join('p.modePayment', 'mode');
                $hasPaiement = true;
            }
            $qb
                ->$operateur("p.numeroReglement LIKE :cheque")
                ->setParameter("cheque", "%" . $criteres["cheque"] . "%");
            $operateur = "andWhere";
        }
        if (isset($criteres["isPaid"])) {
            $qb->$operateur("c.isPaid = :isPaid")
                ->setParameter("isPaid", $criteres["isPaid"]);
            $operateur = "andWhere";
        }
        if (isset($criteres["ttc"])) {
            $qb->$operateur("c.montantTtc = :ttc")
                ->setParameter("ttc", $criteres["ttc"]);
            $operateur = "andWhere";
        }
        if (isset($criteres["ht"])) {
            $qb->$operateur("c.montantHt = :ht")
                ->setParameter("ht", $criteres["ht"]);
            $operateur = "andWhere";
        }

        if (isset($criteres["mois"])) {
            $qb->$operateur("month(c.date) = :mois")
                ->setParameter("mois", $criteres["mois"]);
            $operateur = "andWhere";
        }

        if (isset($criteres["annee"])) {
            $qb->$operateur("year(c.date) = :annee")
                ->setParameter("annee", $criteres["annee"]);
            $operateur = "andWhere";
        }


        if ($getTotals) {
            if (!$hasPaiement)
                $qb->Join('c.paiements', 'p')->Join('p.modePayment', 'mode');
            $qb->select("mode.label,SUM(p.prix) AS total")
                ->groupBy('mode')
                ->getQuery()->getResult();
            return $qb->getQuery()->getResult();
        }
        if($getProduitsVentes){
            $qb->join('c.produits','cpr')
                ->join('cpr.produit','pr')
                ->select("pr.titre,pr.unite,SUM(cpr.quantite) AS qte")
                ->groupBy('pr')
                ->getQuery()->getResult()
            ;
            return $qb->getQuery()->getResult();
        }
        $totalFiltred = $qb->select("COUNT(f)")->getQuery()->getSingleScalarResult();
        $totals = $this->listeDataTable($criteres, $sort, $dir, $start, $max, true);
        $produits = $this->listeDataTable($criteres, $sort, $dir, $start, $max, false,true);
        $qb2 = clone $qb;
        $factures = $qb
            ->select("DISTINCT f")
            ->setFirstResult($start)
            ->setMaxResults($max)
            ->orderBy($sort, $dir)
            ->getQuery()->getResult();

        $totalGlobal = $qb2->select('SUM(c.montantTtc) AS totalTtc')
            ->getQuery()->getSingleScalarResult();
        if (!$hasPaiement)
            $qb2->join('c.paiements', 'p');
        $totalAvance = $qb2->select('SUM(p.prix)')->getQuery()->getSingleScalarResult();
        return array("total" => $total, "totalAvance" => $totalAvance, "totalFiltred" => $totalFiltred, "factures" => $factures, "totals" => $totals, "totalGlobal" => $totalGlobal, 'produits' => $produits);
    }

    function findByIds(array $ids, $order = null, $dir = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('f')
            ->from($this->getEntityName(), 'f')
            ->join('f.commande', 'c')
            ->where('f.id IN (:ids)')
            ->setParameter('ids', $ids);
        if ($order and $dir)
            $qb->orderBy($order, $dir);

        return $qb->getQuery()->getResult();
    }

    function collect(array $ids, $order = null, $dir = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('f.id AS id,c.id AS bl,c.dateLivraison AS date_livraison,c.date AS date,c.montantHt AS ht,c.montantTtc AS ttc,IFNULL((SELECT SUM(p.prix) FROM AppBundle:Paiement p INNER JOIN p.commande cmd WHERE cmd.id = c.id),0) AS avance,c.tva AS tva,c.remise As remise,CASE WHEN (c.client IS NULL) THEN e.nom ELSE CONCAT(clt.prenom,CONCAT(\' \',clt.nom)) AS client,CASE WHEN (c.client IS NULL) THEN e.adresse ELSE clt.adresse AS client_adresse,c.isPaid As paid,IFNULL((SELECT SUM(fs.prix + (fs.prix * IFNULL(fs.tva,0) / 100)) FROM AppBundle:FraisSupp fs INNER JOIN fs.commande cmdF WHERE cmdF.id = c.id),0) AS frais,CASE WHEN (c.remise IS NOT NULL) THEN (c.montantHt * c.remise / 100) ELSE 0 As reduction')
            ->from($this->getEntityName(), 'f')
            ->join('f.commande', 'c')
            ->leftJoin('c.client','clt')
            ->leftJoin('c.entreprise','e')
            ->where('f.id IN (:ids)')
            ->setParameter('ids', $ids);
        if ($order and $dir)
            $qb->orderBy($order, $dir);

        return $qb->getQuery()->getResult();
    }

}
