<?php

namespace AppBundle\Entity;

use CoreBundle\Entity\Traits\AdresseTrait;
use CoreBundle\Entity\Traits\ArchiveTrait;
use CoreBundle\Entity\Traits\CinTrait;
use CoreBundle\Entity\Traits\EmailTrait;
use CoreBundle\Entity\Traits\GsmTrait;
use Doctrine\ORM\Mapping as ORM;
use CoreBundle\Entity\MappedSuperClass\AbstractEntity;
use CoreBundle\Entity\Traits\NomTrait;
use CoreBundle\Entity\Traits\PrenomTrait;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Exclude;

/**
 * Employe
 *
 * @UniqueEntity(
 *     fields="cin",
 *     message="Le CIN '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="email",
 *     message="L'email '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="email1",
 *     message="L'email '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="gsm",
 *     message="Le GSM '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="gsm1",
 *     message="Le GSM '{{ value }}' est déjà utilisé"
 * )
 * @ORM\Table(name="employe")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\EmployeRepository")
 */
class Employe extends AbstractEntity
{
    use NomTrait;
    use PrenomTrait;
    use AdresseTrait;
    use ArchiveTrait;
    use CinTrait;
    use EmailTrait;
    use GsmTrait;

    /**
     * @Exclude
     * @ORM\ManyToMany(targetEntity="Image", cascade={"persist","remove"}))
     * @ORM\JoinTable(name="employe_image",
     *      joinColumns={@ORM\JoinColumn(name="employe_id", referencedColumnName="id", onDelete="cascade")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="image_id", referencedColumnName="id", onDelete="cascade")}
     *      )
     */
    private $imagesDocuments;

    /**
     * @var string
     *
     * @Assert\Email(
     *     message = "L’email '{{ value }}' n’est pas une adresse email valide",
     *     checkMX = true
     * )
     * @ORM\Column(name="email1", type="string", length=255, unique=true, nullable=true)
     */
    private $email1;

    /**
     * @var string
     *
     * @ORM\Column(name="gsm1", type="string", length=25, unique=true, nullable=true)
     */
    private $gsm1;

    /**
     * @var string
     *
     * @ORM\Column(name="autres", type="string", length=255, nullable=true)
     */
    private $autres;

    /**
     * @Exclude
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\OneToMany(targetEntity="Commande", mappedBy="employe")
     */
    private $commandes;

    /**
     * @var string
     * @Assert\GreaterThanOrEqual(
     *     message = "Le salaire doit être supérieur ou égal à zéro.  ",
     *     value = 0
     * )
     * @ORM\Column(name="salaire", type="decimal", precision=10, scale=2, nullable=true)
     */
    private $salaire;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateEmbauche", type="datetime", nullable=true)
     */
    private $dateEmbauche;

    /**
     * @var string
     *
     * @ORM\Column(name="fonction", type="string", length=255, nullable=true)
     */
    private $fonction;

    /**
     * @Exclude
     * @var Client
     * @ORM\OneToOne(targetEntity="Client", mappedBy="employe")
     */
    private $commerciale;

    /**
     * Set salaire
     *
     * @param string $salaire
     *
     * @return Employe
     */
    public function setSalaire($salaire)
    {
        $this->salaire = $salaire;

        return $this;
    }

    /**
     * Get salaire
     *
     * @return string
     */
    public function getSalaire()
    {
        return $this->salaire;
    }

    /**
     * Set dateEmbauche
     *
     * @param \DateTime $dateEmbauche
     *
     * @return Employe
     */
    public function setDateEmbauche($dateEmbauche)
    {
        $this->dateEmbauche = $dateEmbauche;

        return $this;
    }

    /**
     * Get dateEmbauche
     *
     * @return \DateTime
     */
    public function getDateEmbauche()
    {
        return $this->dateEmbauche;
    }

    /**
     * Set fonction
     *
     * @param string $fonction
     *
     * @return Employe
     */
    public function setFonction($fonction)
    {
        $this->fonction = $fonction;

        return $this;
    }

    /**
     * Get fonction
     *
     * @return string
     */
    public function getFonction()
    {
        return $this->fonction;
    }

    /**
     * Set email1
     *
     * @param string $email1
     *
     * @return Employe
     */
    public function setEmail1($email1)
    {
        $this->email1 = $email1;

        return $this;
    }

    /**
     * Get email1
     *
     * @return string
     */
    public function getEmail1()
    {
        return $this->email1;
    }

    /**
     * Set gsm1
     *
     * @param string $gsm1
     *
     * @return Employe
     */
    public function setGsm1($gsm1)
    {
        $this->gsm1 = $gsm1;

        return $this;
    }

    /**
     * Get gsm1
     *
     * @return string
     */
    public function getGsm1()
    {
        return $this->gsm1;
    }

    /**
     * Set autres
     *
     * @param string $autres
     *
     * @return Employe
     */
    public function setAutres($autres)
    {
        $this->autres = $autres;

        return $this;
    }

    /**
     * Get autres
     *
     * @return string
     */
    public function getAutres()
    {
        return $this->autres;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->imagesDocuments = new \Doctrine\Common\Collections\ArrayCollection();
        $this->commandes = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add imagesDocument
     *
     * @param \AppBundle\Entity\Image $imagesDocument
     *
     * @return Employe
     */
    public function addImagesDocument(\AppBundle\Entity\Image $imagesDocument)
    {
        $this->imagesDocuments[] = $imagesDocument;

        return $this;
    }

    /**
     * Remove imagesDocument
     *
     * @param \AppBundle\Entity\Image $imagesDocument
     */
    public function removeImagesDocument(\AppBundle\Entity\Image $imagesDocument)
    {
        $this->imagesDocuments->removeElement($imagesDocument);
    }

    /**
     * Get imagesDocuments
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getImagesDocuments()
    {
        return $this->imagesDocuments;
    }

    function getFullName(){
        return $this->getNom().' '.$this->getPrenom();
    }



    /**
     * Add commande
     *
     * @param \AppBundle\Entity\Commande $commande
     *
     * @return Employe
     */
    public function addCommande(\AppBundle\Entity\Commande $commande)
    {
        $this->commandes[] = $commande;

        return $this;
    }

    /**
     * Remove commande
     *
     * @param \AppBundle\Entity\Commande $commande
     */
    public function removeCommande(\AppBundle\Entity\Commande $commande)
    {
        $this->commandes->removeElement($commande);
    }

    /**
     * Get commandes
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCommandes()
    {
        return $this->commandes;
    }


    /**
     * Is Commercial
     *
     * @return boolean
     */
    public function isCommercial()
    {
        return is_null($this->commerciale) ? false : true;
    }

    /**
     * Set commerciale
     *
     * @param \AppBundle\Entity\Client $commerciale
     *
     * @return Employe
     */
    public function setCommerciale(\AppBundle\Entity\Client $commerciale = null)
    {
        $this->commerciale = $commerciale;

        return $this;
    }

    /**
     * Get commerciale
     *
     * @return \AppBundle\Entity\Client
     */
    public function getCommerciale()
    {
        return $this->commerciale;
    }

    public function getNom()
    {
        return ucfirst($this->nom);
    }

    public function getPrenom()
    {
        return ucfirst($this->prenom);
    }
}
