<?php

namespace AppBundle\Entity;

use CoreBundle\Entity\Traits\ArchiveTrait;
use CoreBundle\Entity\Traits\ObservationTrait;
use Doctrine\ORM\Mapping as ORM;
use CoreBundle\Entity\MappedSuperClass\AbstractEntity;
use CoreBundle\Entity\Traits\LabelTrait;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use JMS\Serializer\Annotation\Exclude;

/**
 * TypeDepense
 *
 * @UniqueEntity(
 *     fields="label",
 *     message="Le libellé '{{ value }}' est déjà utilisé"
 * )
 * @ORM\Table(name="type_depense")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\TypeDepenseRepository")
 */
class TypeDepense extends AbstractEntity
{
    use LabelTrait;
    use ArchiveTrait;

    /**
     * @var bool
     *
     * @ORM\Column(name="mensuelle", type="boolean", options={"default"=false}),nullable=false)
     */
    private $mensuelle = false;

    /**
     * @Exclude
     * @ORM\ManyToOne(targetEntity="TypeDepense", inversedBy="childrens")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="id", nullable=true)
     */
    protected $parent;

    /**
     * @ORM\OneToMany(targetEntity="TypeDepense", mappedBy="parent")
     */
    private $childrens;

    /**
     * @Exclude
     * @ORM\ManyToMany(targetEntity="Charge", mappedBy="typesDepenses")
     */
    private $charges;


    /**
     * @var ArrayCollection
     *
     * @ORM\ManyToMany(targetEntity="Fournisseur", inversedBy="typesDepenses")
     * @ORM\JoinTable(name="type_depenses_fournisseur")
     */
    private $fournisseurs;

    /**
     * @var bool
     *
     * @ORM\Column(name="forEmploye", type="boolean", nullable=true)
     */
    private $forEmploye;

    /**
     * Set forEmploye
     *
     * @param boolean $forEmploye
     *
     * @return TypeDepense
     */
    public function setForEmploye($forEmploye)
    {
        $this->forEmploye = $forEmploye;

        return $this;
    }

    /**
     * Get forEmploye
     *
     * @return bool
     */
    public function getForEmploye()
    {
        return $this->forEmploye;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->fournisseurs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->charges = new \Doctrine\Common\Collections\ArrayCollection();
        $this->childrens = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add fournisseur
     *
     * @param \AppBundle\Entity\Fournisseur $fournisseur
     *
     * @return TypeDepense
     */
    public function addFournisseur(\AppBundle\Entity\Fournisseur $fournisseur)
    {
        $this->fournisseurs[] = $fournisseur;

        return $this;
    }

    /**
     * Remove fournisseur
     *
     * @param \AppBundle\Entity\Fournisseur $fournisseur
     */
    public function removeFournisseur(\AppBundle\Entity\Fournisseur $fournisseur)
    {
        $this->fournisseurs->removeElement($fournisseur);
    }

    /**
     * Get fournisseurs
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFournisseurs()
    {
        return $this->fournisseurs;
    }

    /**
     * Add charge
     *
     * @param \AppBundle\Entity\Charge $charge
     *
     * @return TypeDepense
     */
    public function addCharge(\AppBundle\Entity\Charge $charge)
    {
        $this->charges[] = $charge;

        return $this;
    }

    /**
     * Remove charge
     *
     * @param \AppBundle\Entity\Charge $charge
     */
    public function removeCharge(\AppBundle\Entity\Charge $charge)
    {
        $this->charges->removeElement($charge);
    }

    /**
     * Get charges
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCharges()
    {
        return $this->charges;
    }

    /**
     * Set parent
     *
     * @param \AppBundle\Entity\TypeDepense $parent
     *
     * @return TypeDepense
     */
    public function setParent(\AppBundle\Entity\TypeDepense $parent = null)
    {
        $this->parent = $parent;

        return $this;
    }

    /**
     * Get parent
     *
     * @return \AppBundle\Entity\TypeDepense
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Add children
     *
     * @param \AppBundle\Entity\TypeDepense $children
     *
     * @return TypeDepense
     */
    public function addChildren(\AppBundle\Entity\TypeDepense $children)
    {
        $this->childrens[] = $children;

        return $this;
    }

    /**
     * Remove children
     *
     * @param \AppBundle\Entity\TypeDepense $children
     */
    public function removeChildren(\AppBundle\Entity\TypeDepense $children)
    {
        $this->childrens->removeElement($children);
    }

    /**
     * Get childrens
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getChildrens()
    {
        return $this->childrens;
    }

    function fullLabel(){
        $label ='';
        if($this->getParent())
            $label .= $this->getParent()->getLabel();
        return $label.' '.$this->getLabel();
    }

    /**
     * Set mensuelle
     *
     * @param boolean $mensuelle
     *
     * @return TypeDepense
     */
    public function setMensuelle($mensuelle)
    {
        $this->mensuelle = $mensuelle;

        return $this;
    }

    /**
     * Is mensuelle
     *
     * @return boolean
     */
    public function isMensuelle()
    {
        return $this->mensuelle;
    }

    /**
     * Get mensuelle
     *
     * @return boolean
     */
    public function getMensuelle()
    {
        return $this->mensuelle;
    }
}
