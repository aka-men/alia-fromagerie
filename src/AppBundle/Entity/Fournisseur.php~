<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use AppBundle\Entity\AbstractCompany;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use JMS\Serializer\Annotation\Exclude;

/**
 * Fournisseur
 *
 * @UniqueEntity(
 *     fields="nom",
 *     message="Le nom '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="email",
 *     message="L'email '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="idCE",
 *     message="L'id ICE '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="idFiscale",
 *     message="L'id fiscale '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="patente",
 *     message="La patente '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="cnss",
 *     message="Le numéro CNSS '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="phone",
 *     message="Le numéro de téléphone '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="fax",
 *     message="Le numéro de fax '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="site",
 *     message="Le site web '{{ value }}' est déjà utilisé"
 * )
 * @UniqueEntity(
 *     fields="compteBancaire",
 *     message="Le compte bancaire '{{ value }}' est déjà utilisé"
 * )
 * @ORM\Table(name="fournisseur")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\FournisseurRepository")
 */
class Fournisseur extends AbstractCompany
{


    /**
     * @var int
     *
     * @ORM\Column(name="typeVente", type="integer",nullable=true)
     */
    private $typeVente;

    /**
     * @Exclude
     * @ORM\ManyToMany(targetEntity="Produit", mappedBy="fournisseurs")
     */
    private $produits;

    /**
     * @Exclude
     * @ORM\ManyToMany(targetEntity="TypeDepense", mappedBy="fournisseurs")
     */
    private $typesDepenses;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->produits = new \Doctrine\Common\Collections\ArrayCollection();
        $this->typesDepenses = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add produit
     *
     * @param \AppBundle\Entity\Produit $produit
     *
     * @return Fournisseur
     */
    public function addProduit(\AppBundle\Entity\Produit $produit)
    {
        $this->produits[] = $produit;

        return $this;
    }

    /**
     * Remove produit
     *
     * @param \AppBundle\Entity\Produit $produit
     */
    public function removeProduit(\AppBundle\Entity\Produit $produit)
    {
        $this->produits->removeElement($produit);
    }

    /**
     * Get produits
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProduits()
    {
        return $this->produits;
    }

    /**
     * Add typesDepense
     *
     * @param \AppBundle\Entity\TypeDepense $typesDepense
     *
     * @return Fournisseur
     */
    public function addTypesDepense(\AppBundle\Entity\TypeDepense $typesDepense)
    {
        $this->typesDepenses[] = $typesDepense;

        return $this;
    }

    /**
     * Remove typesDepense
     *
     * @param \AppBundle\Entity\TypeDepense $typesDepense
     */
    public function removeTypesDepense(\AppBundle\Entity\TypeDepense $typesDepense)
    {
        $this->typesDepenses->removeElement($typesDepense);
    }

    /**
     * Get typesDepenses
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTypesDepenses()
    {
        return $this->typesDepenses;
    }

    /**
     * Set typeVente
     *
     * @param integer $typeVente
     *
     * @return Fournisseur
     */
    public function setTypeVente($typeVente)
    {
        $this->typeVente = $typeVente;

        return $this;
    }

    /**
     * Get typeVente
     *
     * @return integer
     */
    public function getTypeVente()
    {
        return $this->typeVente ? $this->typeVente : 0;
    }

    function selProduct(Produit $produit){
        foreach ($this->getProduits() as $fp){
            if($fp->getId() === $produit->getId())
                return true;
        }
        return false;
    }

    function sellProducts(ArrayCollection $produits){
        if($produits->count() > 0){
            foreach ($produits as $p){
                if(!$this->selProduct($p))
                    return false;
            }
            return true;
        }
        return false;

    }

    function hasTypeDepense(TypeDepense $type){
        $hasType = false;
        foreach ($this->getTypesDepenses() as $typeDepense){
            if($type->getId() === $typeDepense->getId()){
                $hasType = true;
                break;
            }
        }
        return $hasType;
    }
}
